-- Section A: Subqueries

-----A1-----
SELECT CUST_NO, NAME, PHONE_NO
FROM CUSTOMER
WHERE CUST_NO IN (SELECT CUST_NO FROM DEPOSITOR WHERE ACCOUNT_NO = 'A0004');

-----A2-----
SELECT NAME
FROM CUSTOMER
WHERE CUST_NO NOT IN (SELECT CUST_NO FROM LOAN);

-----A3-----
SELECT ACCOUNT_NO, BALANCE
FROM ACCOUNT
WHERE ACCOUNT_NO IN (SELECT ACCOUNT_NO FROM DEPOSITOR WHERE CUST_NO = 'C0010');

-----A4-----
SELECT BRANCH_CITY
FROM BRANCH
WHERE BRANCH_CODE IN (SELECT BRANCH_CODE FROM LOAN WHERE CUST_NO = 
    (SELECT CUST_NO FROM CUSTOMER WHERE NAME = 'ASLESHA TIWARI'));

-----A5-----
SELECT INST_NO, LOAN_NO, INST_AMOUNT
FROM INSTALLMENT
WHERE LOAN_NO IN (SELECT LOAN_NO FROM LOAN WHERE CUST_NO = 
    (SELECT CUST_NO FROM CUSTOMER WHERE NAME = 'ANKITA SINGH'));

-----A6-----
SELECT BRANCH_NAME, BRANCH_CITY
FROM BRANCH
WHERE BRANCH_CODE IN (SELECT BRANCH_CODE FROM ACCOUNT WHERE ACCOUNT_NO IN 
    (SELECT ACCOUNT_NO FROM DEPOSITOR WHERE CUST_NO = 
        (SELECT CUST_NO FROM CUSTOMER WHERE NAME = 'ABHIJIT MISHRA')));

-----A7-----
CREATE TABLE ACCOUNT_TYPE (
    ACCOUNT_NO VARCHAR2(5),
    TYPE VARCHAR2(2),
    CONSTRAINT pk_account_type PRIMARY KEY (ACCOUNT_NO)
);

-----A8-----
INSERT INTO ACCOUNT_TYPE
SELECT ACCOUNT_NO, TYPE
FROM ACCOUNT
WHERE BALANCE < 50000;

-----A9-----
UPDATE ACCOUNT_TYPE
SET TYPE = 'FD'
WHERE ACCOUNT_NO IN (SELECT ACCOUNT_NO FROM DEPOSITOR WHERE CUST_NO = 'C0007');

-----A10-----
DELETE FROM ACCOUNT_TYPE
WHERE ACCOUNT_NO IN (SELECT ACCOUNT_NO FROM ACCOUNT WHERE BALANCE < 20000);

-----A11-----
SELECT ACCOUNT_NO
FROM ACCOUNT
WHERE BALANCE > SOME (SELECT BALANCE FROM ACCOUNT WHERE TYPE = 'FD');

-----A12-----
SELECT ACCOUNT_NO
FROM ACCOUNT
WHERE BALANCE > ALL (SELECT BALANCE FROM ACCOUNT WHERE TYPE = 'FD');

-----A13-----
SELECT *
FROM BRANCH
WHERE EXISTS (SELECT 1 FROM LOAN WHERE LOAN.BRANCH_CODE = BRANCH.BRANCH_CODE);

-----A14-----
SELECT *
FROM LOAN
WHERE NOT EXISTS (SELECT 1 FROM INSTALLMENT WHERE INSTALLMENT.LOAN_NO = LOAN.LOAN_NO);

-----A15-----
UPDATE ACCOUNT
SET BALANCE = CASE
    WHEN BALANCE > 80000 THEN BALANCE * 1.06
    ELSE BALANCE * 1.05
END;

-- Section B: Joins

-----B1-----
SELECT DISTINCT LOAN.LOAN_NO
FROM LOAN
JOIN BRANCH ON LOAN.BRANCH_CODE = BRANCH.BRANCH_CODE
WHERE BRANCH.BRANCH_CITY = 'MUMBAI';

-----B2-----
SELECT DISTINCT ACCOUNT.TYPE
FROM ACCOUNT
JOIN BRANCH ON ACCOUNT.BRANCH_CODE = BRANCH.BRANCH_CODE
WHERE BRANCH.BRANCH_CITY = 'DELHI';

-----B3-----
SELECT DISTINCT CUSTOMER.NAME, CUSTOMER.PHONE_NO
FROM CUSTOMER
JOIN DEPOSITOR ON CUSTOMER.CUST_NO = DEPOSITOR.CUST_NO
JOIN ACCOUNT ON DEPOSITOR.ACCOUNT_NO = ACCOUNT.ACCOUNT_NO
WHERE ACCOUNT.BALANCE > 100000;

-----B4-----
SELECT INSTALLMENT.INST_NO, INSTALLMENT.INST_AMOUNT
FROM CUSTOMER
JOIN LO similiON ON CUSTOMER.CUST_NO = LOAN.CUST_NO
JOIN INSTALLMENT ON LOAN.LOAN_NO = INSTALLMENT.LOAN_NO
WHERE CUSTOMER.NAME = 'RAJ ANAND SINGH';

-----B5-----
SELECT DISTINCT CUSTOMER.NAME
FROM CUSTOMER
WHERE NOT EXISTS (
    SELECT 1 
    FROM DEPOSITOR 
    JOIN ACCOUNT ON DEPOSITOR.ACCOUNT_NO = ACCOUNT.ACCOUNT_NO 
    WHERE DEPOSITOR.CUST_NO = CUSTOMER.CUST_NO AND ACCOUNT.TYPE = 'SB'
);

-----B6-----
SELECT DISTINCT CUSTOMER.NAME
FROM CUSTOMER
JOIN LOAN ON CUSTOMER.CUST_NO = LOAN.CUST_NO
JOIN INSTALLMENT ON LOAN.LOAN_NO = INSTALLMENT.LOAN_NO
WHERE INSTALLMENT.INST_AMOUNT = 50000;

-----B7-----
SELECT DISTINCT CUSTOMER.PHONE_NO
FROM CUSTOMER
JOIN DEPOSITOR ON CUSTOMER.CUST_NO = DEPOSITOR.CUST_NO
JOIN ACCOUNT ON DEPOSITOR.ACCOUNT_NO = ACCOUNT.ACCOUNT_NO
JOIN BRANCH ON ACCOUNT.BRANCH_CODE = BRANCH.BRANCH_CODE
WHERE BRANCH.BRANCH_NAME = 'SALTLAKE BRANCH';

-----B8-----
SELECT BRANCH.BRANCH_NAME, BRANCH.BRANCH_CITY
FROM CUSTOMER
JOIN DEPOSITOR ON CUSTOMER.CUST_NO = DEPOSITOR.CUST_NO
JOIN ACCOUNT ON DEPOSITOR.ACCOUNT_NO = ACCOUNT.ACCOUNT_NO
JOIN BRANCH ON ACCOUNT.BRANCH_CODE = BRANCH.BRANCH_CODE
WHERE CUSTOMER.NAME = 'ABHIJIT MISHRA';

-----B9-----
SELECT ACCOUNT.TYPE, ACCOUNT.BALANCE
FROM CUSTOMER
JOIN DEPOSITOR ON CUSTOMER.CUST_NO = DEPOSITOR.CUST_NO
JOIN ACCOUNT ON DEPOSITOR.ACCOUNT_NO = ACCOUNT.ACCOUNT_NO
WHERE CUSTOMER.NAME = 'SWAROOP RAY';

-----B10-----
WITH branch_totals AS (
    SELECT BRANCH_CODE, SUM(BALANCE) AS total_balance
    FROM ACCOUNT
    GROUP BY BRANCH_CODE
),
avg_balance AS (
    SELECT AVG(total_balance) AS avg_total
    FROM branch_totals
)
SELECT branch_totals.BRANCH_CODE
FROM branch_totals, avg_balance
WHERE branch_totals.total_balance > avg_balance.avg_total;
